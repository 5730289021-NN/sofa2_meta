#!/usr/bin/env python
"""
@package acc_lim_vel_filter
@file acc_lim_vel_filter_impl.py
@author Norawit Nangsue
@brief Acceleration Limit Velocity Filter

Copyright (C) FIBO
FIBO
"""

import rospy
from geometry_msgs.msg import Twist
from geometry_msgs.msg import Twist
from geometry_msgs.msg import PoseWithCovarianceStamped
from move_base_msgs.msg import MoveBaseActionGoal
from actionlib_msgs.msg import GoalStatusArray

# protected region user include package begin #
from math import sqrt
# protected region user include package end #


class AccLimVelFilterConfig(object):
    """
    set of static and dynamic parameters
    autogenerated: don't touch this class
    """
    def __init__(self):
        # parameters handled through the parameter server
        self.acc_lin_lim = 0.6
        self.acc_ang_lim = 0.6
        self.goal_dist_thres = 5.0
        self.auto_min_vel = 0.05
        self.Kp = 0.1
        pass

    def __str__(self):
        msg = "Instance of AccLimVelFilterConfig class: {"
        msg += "acc_lin_lim: {} ".format(self.acc_lin_lim)
        msg += "acc_ang_lim: {} ".format(self.acc_ang_lim)
        msg += "goal_dist_thres: {} ".format(self.goal_dist_thres)
        msg += "auto_min_vel: {} ".format(self.auto_min_vel)
        msg += "Kp: {} ".format(self.Kp)
        msg += "}"
        return msg


class AccLimVelFilterData(object):
    """
    set of input / output handled through the update methods
    autogenerated: don't touch this class
    """
    def __init__(self):
        """
        Definition of the AccLimVelFilterData attributes
        """
        # input data
        self.in_vel_in = Twist()
        self.in_vel_in_updated = bool()
        self.in_amcl_pose = PoseWithCovarianceStamped()
        self.in_amcl_pose_updated = bool()
        self.in_move_base_goal = MoveBaseActionGoal()
        self.in_move_base_goal_updated = bool()
        self.in_move_base_status = GoalStatusArray()
        self.in_move_base_status_updated = bool()
        # output data
        self.out_vel_out = Twist()
        self.out_vel_out_active = bool()
        pass

    def __str__(self):
        msg = "Instance of AccLimVelFilterData class: \n {"
        msg += "in_vel_in: {} \n".format(self.in_vel_in)
        msg += "in_vel_in_updated: {} \n".format(self.in_vel_in_updated)
        msg += "in_amcl_pose: {} \n".format(self.in_amcl_pose)
        msg += "in_amcl_pose_updated: {} \n".format(self.in_amcl_pose_updated)
        msg += "in_move_base_goal: {} \n".format(self.in_move_base_goal)
        msg += "in_move_base_goal_updated: {} \n".format(self.in_move_base_goal_updated)
        msg += "in_move_base_status: {} \n".format(self.in_move_base_status)
        msg += "in_move_base_status_updated: {} \n".format(self.in_move_base_status_updated)
        msg += "out_vel_out: {} \n".format(self.out_vel_out_active)
        msg += "out_vel_out_active: {} \n".format(self.out_vel_out_active)
        msg += "}"
        return msg


class AccLimVelFilterPassthrough(object):
    """
    set of passthrough elements slightly violating interface / implementation separation
    Autogenerated: don't touch this class
    """
    def __init__(self):
        """ Class to contain variable breaking the interface separation
        """
        pass


class AccLimVelFilterImplementation(object):
    """
    Class to contain Developer implementation.
    """
    def __init__(self):
        """
        Definition and initialisation of class attributes
        """
        self.passthrough = AccLimVelFilterPassthrough()

        # protected region user member variables begin #
        self.vel_prev = Twist()
        self.displacement = 65535
        # protected region user member variables end #

    def configure(self, config):
        """
        @brief configuration of the implementation
        @param      self The object
        @param      config set of configuration parameters
        @return True on success
        """
        # protected region user configure begin #
        rospy.loginfo('Velocity Filter Node Started')
        return True
        # protected region user configure end #

    def update(self, data, config):
        """
        @brief { function_description }

        @param      self The object
        @param      data data handled through the ros class
        @param      config parameters handled through dyn. recon.

        @return nothing
        """
        # protected region user update begin #
        # can be removed once filled
        
        # In -> Out
        data.out_vel_out = data.in_vel_in
        
        # Get Current Displacement
        if data.in_amcl_pose_updated:
            dx = data.in_amcl_pose.pose.pose.position.x - data.in_move_base_goal.goal.target_pose.pose.position.x
            dy = data.in_amcl_pose.pose.pose.position.y - data.in_move_base_goal.goal.target_pose.pose.position.y
            self.displacement = sqrt(dx * dx + dy * dy)

        if data.in_move_base_status.status_list and data.in_move_base_status.status_list[-1].status == 1 and self.displacement < config.goal_dist_thres:
            # goal based velocity filter
            rospy.loginfo_once('Goal based Enhanced Filter Mode') 
            data.out_vel_out.linear.x = config.Kp * self.displacement * data.in_vel_in.linear.x
            if data.out_vel_out.linear.x < config.auto_min_vel and config.auto_min_vel < data.in_vel_in.linear.x:
                data.out_vel_out.linear.x = config.auto_min_vel
            # data.out_vel_out.angular.z = config.Kp * self.displacement * data.in_vel_in.angular.z
        else:
            rospy.loginfo_once('Acceleration Limit Velocity Filter Mode')
            # move_base is not started yet or started but in not active mode 
            # just normal acceleration limit velocity filter
            # 0.05 sec is from 20 Hz

        # Find request linear acceleration
        acc_lin = (data.out_vel_out.linear.x  - self.vel_prev.linear.x) / 0.05
        # Filter Linear Velocity
        if acc_lin > config.acc_lin_lim:
            rospy.loginfo_once('Filter +')
            data.out_vel_out.linear.x = self.vel_prev.linear.x + config.acc_lin_lim * 0.05
        elif acc_lin < -config.acc_lin_lim:
            rospy.loginfo_once('Filter - %f, %f', acc_lin, config.acc_lin_lim)
            data.out_vel_out.linear.x = self.vel_prev.linear.x - config.acc_lin_lim * 0.05
            
        self.vel_prev = data.out_vel_out
        # protected region user update end #

    def terminate(self):
        """
        A function performed when Keyboard Interrupt trigger
	    This gives you a chance to save important data or clean clean object if needed
        """
        # protected region user terminate begin #
        pass
        # protected region user terminate end #


    # protected region user additional functions begin #
    # protected region user additional functions end #
