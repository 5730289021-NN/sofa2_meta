#!/usr/bin/env python
"""
@package system_checker
@file system_checker_impl.py
@author Norawit Nangsue
@brief System Checker

Copyright (C) FIBO
FIBO
"""

import rospy
from actionlib_msgs.msg import GoalStatusArray
from sensor_msgs.msg import LaserScan

# protected region user include package begin #
from enum import IntEnum
from abc import ABCMeta, abstractmethod    
# protected region user include package end #


class SystemCheckerConfig(object):
    """
    set of static and dynamic parameters
    autogenerated: don't touch this class
    """
    def __init__(self):
        pass

    def __str__(self):
        msg = "Instance of SystemCheckerConfig class: {"
        msg += "}"
        return msg


class SystemCheckerData(object):
    """
    set of input / output handled through the update methods
    autogenerated: don't touch this class
    """
    def __init__(self):
        """
        Definition of the SystemCheckerData attributes
        """
        # input data
        self.in_move_base_status = GoalStatusArray()
        self.in_move_base_status_updated = bool()
        self.in_scan_1 = LaserScan()
        self.in_scan_1_updated = bool()
        self.in_scan_2 = LaserScan()
        self.in_scan_2_updated = bool()
        self.in_scan_fusion = LaserScan()
        self.in_scan_fusion_updated = bool()
        pass

    def __str__(self):
        msg = "Instance of SystemCheckerData class: \n {"
        msg += "in_move_base_status: {} \n".format(self.in_move_base_status)
        msg += "in_move_base_status_updated: {} \n".format(self.in_move_base_status_updated)
        msg += "in_scan_1: {} \n".format(self.in_scan_1)
        msg += "in_scan_1_updated: {} \n".format(self.in_scan_1_updated)
        msg += "in_scan_2: {} \n".format(self.in_scan_2)
        msg += "in_scan_2_updated: {} \n".format(self.in_scan_2_updated)
        msg += "in_scan_fusion: {} \n".format(self.in_scan_fusion)
        msg += "in_scan_fusion_updated: {} \n".format(self.in_scan_fusion_updated)
        msg += "}"
        return msg


class SystemCheckerPassthrough(object):
    """
    set of passthrough elements slightly violating interface / implementation separation
    Autogenerated: don't touch this class
    """
    def __init__(self):
        """ Class to contain variable breaking the interface separation
        """
        pass


class SystemCheckerImplementation(object):
    """
    Class to contain Developer implementation.
    """
    def __init__(self):
        """
        Definition and initialisation of class attributes
        """
        self.passthrough = SystemCheckerPassthrough()

        # protected region user member variables begin #

        #LIDAR
        self.lidar_front = LidarUpdate('/fault/lidar_f', 'FRONT_LIDAR_')
        self.lidar_rear = LidarUpdate('/fault/lidar_r', 'REAR_LIDAR_')
        self.lidar_merge = LidarUpdate('/fault/lidar_m', 'MERGED_LIDAR_')

        #MOVE_BASE
        self.move_base = MoveBaseFilterUpdate('/system/response')

        #FAULT_CHECKER
        self.updateObject = [self.lidar_front, self.lidar_rear, self.lidar_merge, self.move_base]
        self.fault_map = {}
        self.fault_level = FaultLevel.NORMAL
        # protected region user member variables end #

    def configure(self, config):
        """
        @brief configuration of the implementation
        @param      self The object
        @param      config set of configuration parameters
        @return True on success
        """
        # protected region user configure begin #
        rospy.loginfo('State Checker Started')

        #REQUIRED for android to start
        rospy.set_param('/map_1/scale', 0.03)
        rospy.set_param('/android/sing', 'DISABLED')
        rospy.set_param('/android/stt', '')
        rospy.set_param('/android/sound', 'UNMUTED')
        rospy.set_param('/android/destination', '')
        rospy.set_param('/android/patient/birth_date', '')
        rospy.set_param('/android/patient/name', '')
        rospy.set_param('/android/patient/confirm', '')

        #TODO
        rospy.set_param('/follow_me/status', 'UNFOLLOWED')

        #FAULT_CHECKER
        # rospy.set_param('/system/status', 'NORMAL')        
        # rospy.set_param('/system/fault_list', [])
        # self.fault_addresses = ['/fault/driver', '/fault/lidar_f', '/fault/lidar_r', '/fault/lidar_m']

        return True
        # protected region user configure end #

    def update(self, data, config):
        """
        @brief { function_description }

        @param      self The object
        @param      data data handled through the ros class
        @param      config parameters handled through dyn. recon.

        @return nothing
        """
        # protected region user update begin #
        # LIDAR
        self.lidar_front.getUpdate(data.in_scan_1_updated)
        self.lidar_rear.getUpdate(data.in_scan_2_updated)
        self.lidar_merge.getUpdate(data.in_scan_fusion_updated)
        # MOVE_BASE
        self.move_base.getUpdate(data.in_move_base_status_updated, data.in_move_base_status.status_list)
        
        # Query Fault from LIDAR and MOVE_BASE
        self.neutralize_fault()
        for updateObj in self.updateObject:
            if not updateObj.getStatus():
                if(type(updateObj) == LidarUpdate):
                    self.fault_map["LIDAR"] = "LIDAR_ERROR"
                    self.assign_fault(FaultLevel.ERROR)
                elif(type(updateObj) == MoveBaseFilterUpdate):
                    self.fault_map["MOVE_BASE"] = "MOVE_BASE_ERROR"
                    self.assign_fault(FaultLevel.WARNING)
                    pass

        # Additional fault from DRIVER and PLC
        
        # DRIVER
        driver_error = rospy.get_param('/fault/driver', 'DRIVER_UNKNOWN')
        if driver_error != '': 
            self.fault_map["DRIVER"] = driver_error
            self.assign_fault(FaultLevel.ERROR)

        #PLC
        plc_hb = rospy.get_param('/plc/heartbeat', 'ERROR')
        if plc_hb != 'NORMAL':
            self.fault_map["PLC_HB"] = "PLC_NO_HB"
            self.assign_fault(FaultLevel.WARNING)
        
        plc_commstat = rospy.get_param('/plc/conn_status', 'DISCONNECTED')
        if plc_commstat != 'CONNECTED':
            self.fault_map["PLC_CONN"] = "PLC_NO_CONN"
            self.assign_fault(FaultLevel.ERROR)
        
        rospy.set_param('/system/status', FaultLevel.toString(self.fault_level))
        rospy.set_param('/system/fault_list', list(self.fault_map.values()))
        # protected region user update end #

    def terminate(self):
        """
        A function performed when Keyboard Interrupt trigger
	    This gives you a chance to save important data or clean clean object if needed
        """
        # protected region user terminate begin #
        rospy.set_param('/system/status', 'TERMINATED')
        pass
        # protected region user terminate end #


    # protected region user additional functions begin #

    def assign_fault(self, level):
        if self.fault_level < level:
            self.fault_level = level
    
    def neutralize_fault(self):
        self.fault_map = {}
        self.fault_level = FaultLevel.NORMAL
    

class FaultLevel(IntEnum):
    NORMAL = 0
    WARNING = 1
    ERROR = 2
    @staticmethod
    def toString(level):
        if level == 0:
            return "NORMAL"
        elif level == 1:
            return "WARNING"
        elif level == 2:
            return "ERROR"
        else:
            return "FATAL"
    
class FaultChecker:
    def __init__(self, update):
        self.fault_list = []
        self.update_obj_list = []
    
    def spin(self):
        pass

    def getFaultStatus(self):
        return self.fault_list


class UpdateObject():
    __metaclass__ = ABCMeta
    @abstractmethod
    def getUpdate(self):
        pass
    
    @abstractmethod
    def getStatus(self):
        pass


class LidarUpdate(UpdateObject):
    def __init__(self, publish_param, prefix):
        self.publish_param = publish_param
        self.prefix = prefix
        self.status = False
    
    def getUpdate(self, isUpdated):
        if isUpdated and not self.status:
            rospy.loginfo('Setting %s: %s', self.publish_param, True)
            self.status = True
            rospy.set_param(self.publish_param, '')
        elif self.status and not isUpdated:
            rospy.loginfo('Setting %s: %s', self.publish_param, False)
            self.status = False
            rospy.set_param(self.publish_param, self.prefix + 'NOT_UPDATED')

    def getStatus(self):
        return self.status

class MoveBaseFilterUpdate(UpdateObject):
    def __init__(self, publish_param):
        self.publish_param = publish_param
        self.id = -1
    
    def getUpdate(self, isUpdated, status_list):
        if isUpdated:
            if not status_list and self.id != 0:
                rospy.loginfo('Setting %s: %s', self.publish_param, 'STAND BY')
                rospy.set_param(self.publish_param, 'STAND BY')
                self.id = 0
            elif status_list and self.id != status_list[-1].status:
                self.id = status_list[-1].status
                rospy.loginfo("move_base_status : %d", status_list[-1].status)
                if self.id == 1:
                    rospy.set_param(self.publish_param, 'GOING TO POSITION')
                elif self.id == 4 or self.id == 5:
                    rospy.set_param(self.publish_param, 'ALARM')
                elif self.id == 3 or self.id == -1:
                    rospy.set_param(self.publish_param, 'COMPLETE')
                elif self.id == 6 or self.id == 7:
                    rospy.set_param(self.publish_param, 'STOPPING')
                elif self.id == 2 or self.id == 8:
                    rospy.set_param(self.publish_param, 'STOPPED')
                rospy.loginfo('Setting %s: %d', self.publish_param, self.id)
        elif self.id != -99:
            rospy.loginfo('Setting %s: %s', self.publish_param, 'ALARM')
            self.id = -99
            rospy.set_param(self.publish_param, 'ALARM')

    def getStatus(self):
        return self.id != 4 and self.id != 5 and self.id != -99

    # protected region user additional functions end #
