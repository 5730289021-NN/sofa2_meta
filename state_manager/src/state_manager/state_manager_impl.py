#!/usr/bin/env python
"""
@package state_manager
@file state_manager_impl.py
@author Norawit Nangsue
@brief State Manager

Copyright (C) FIBO
FIBO
"""

import rospy
from actionlib_msgs.msg import GoalStatusArray

# protected region user include package begin #
# protected region user include package end #


class StateManagerConfig(object):
    """
    set of static and dynamic parameters
    autogenerated: don't touch this class
    """
    def __init__(self):
        pass

    def __str__(self):
        msg = "Instance of StateManagerConfig class: {"
        msg += "}"
        return msg


class StateManagerData(object):
    """
    set of input / output handled through the update methods
    autogenerated: don't touch this class
    """
    def __init__(self):
        """
        Definition of the StateManagerData attributes
        """
        # input data
        self.in_move_base_status = GoalStatusArray()
        self.in_move_base_status_updated = bool()
        pass

    def __str__(self):
        msg = "Instance of StateManagerData class: \n {"
        msg += "in_move_base_status: {} \n".format(self.in_move_base_status)
        msg += "in_move_base_status_updated: {} \n".format(self.in_move_base_status_updated)
        msg += "}"
        return msg


class StateManagerPassthrough(object):
    """
    set of passthrough elements slightly violating interface / implementation separation
    Autogenerated: don't touch this class
    """
    def __init__(self):
        """ Class to contain variable breaking the interface separation
        """
        pass


class StateManagerImplementation(object):
    """
    Class to contain Developer implementation.
    """
    def __init__(self):
        """
        Definition and initialisation of class attributes
        """
        self.passthrough = StateManagerPassthrough()

        # protected region user member variables begin #
        # protected region user member variables end #

    def configure(self, config):
        """
        @brief configuration of the implementation
        @param      self The object
        @param      config set of configuration parameters
        @return True on success
        """
        # protected region user configure begin #
        rospy.loginfo('State Manager Started')

        self.set_rosparam('/system/status', 'NORMAL')
        self.set_rosparam('/system/response', 'STAND BY')
        self.set_rosparam('/system/fault_list', [])
        
        self.set_rosparam('/battery/level', 55)
        
        self.set_rosparam('/map_1/scale', 0.03)
        
        self.set_rosparam('/follow_me/status', 'UNFOLLOWED')

        self.set_rosparam('/camera/zoom_status', 'OFF')
        self.set_rosparam('/camera/depth_status', 'OFF')
        self.set_rosparam('/camera/thermal_status', 'OFF')

        self.set_rosparam('/android/sing', 'DISABLED')
        self.set_rosparam('/android/stt', '')
        self.set_rosparam('/android/sound', 'UNMUTED')
        self.set_rosparam('/android/destination', '')
        self.set_rosparam('/android/patient/birth_date', '')
        self.set_rosparam('/android/patient/name', '')
        self.set_rosparam('/android/patient/confirm', '')
        
        return True
        # protected region user configure end #

    def update(self, data, config):
        """
        @brief { function_description }

        @param      self The object
        @param      data data handled through the ros class
        @param      config parameters handled through dyn. recon.

        @return nothing
        """
        # protected region user update begin #
        # move_base_string_status_map = {
        #     "0": "PENDING", "1": "ACTIVE",
        #     "2": "PREEMPTED", "3": "SUCCEEDED",
        #     "4": "ABORTED", "5": "REJECTED",
        #     "6": "PREEMPTING", "7": "RECALLING",
        #     "8": "RECALLED", "9": "LOST"
        # }

        if data.in_move_base_status_updated and data.in_move_base_status.status_list:
            move_base_status_id = data.in_move_base_status.status_list[-1].status
            rospy.loginfo("move_base_status_id %d", move_base_status_id)
            if move_base_status_id == 1:
                self.set_rosparam('/system/response', 'GOING TO POSITION')
            elif move_base_status_id == 4 or move_base_status_id == 5:
                self.set_rosparam('/system/response', 'ALARM')
            elif move_base_status_id == 3:
                self.set_rosparam('/system/response', 'COMPLETE')
            elif move_base_status_id == 6 or move_base_status_id == 7:
                self.set_rosparam('/system/response', 'STOPPING')
            elif move_base_status_id == 2 or move_base_status_id == 8:
                self.set_rosparam('/system/response', 'STOPPED')

        # protected region user update end #

    def terminate(self):
        """
        A function performed when Keyboard Interrupt trigger
	    This gives you a chance to save important data or clean clean object if needed
        """
        # protected region user terminate begin #
        rospy.set_param('/status', 'TERMINATED')
        pass
        # protected region user terminate end #


    # protected region user additional functions begin #
    def set_rosparam(self, param, value):
        rospy.loginfo('Setting %s: %s', param, value)
        rospy.set_param(param, value)
    # protected region user additional functions end #
